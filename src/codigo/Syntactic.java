
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 25 11:21:06 GMT-05:00 2024
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 25 11:21:06 GMT-05:00 2024
  */
public class Syntactic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\004\005\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\010" +
    "\000\002\004\011\000\002\006\011\000\002\013\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\006\000\002\013\007\000\002\007\015\000\002\010" +
    "\011\000\002\011\013\000\002\012\011\000\002\014\012" +
    "\000\002\014\011\000\002\005\005\000\002\005\004\000" +
    "\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\004\042\005\001\002\000\004\002\155\001" +
    "\002\000\004\035\006\001\002\000\004\027\007\001\002" +
    "\000\004\030\010\001\002\000\004\031\011\001\002\000" +
    "\016\006\025\007\017\010\014\012\021\013\013\014\024" +
    "\001\002\000\020\006\ufff8\007\ufff8\010\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\032\ufff8\001\002\000\004\027\147\001\002" +
    "\000\004\027\135\001\002\000\020\006\ufff4\007\ufff4\010" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\032\ufff4\001\002\000\020" +
    "\006\ufffe\007\ufffe\010\ufffe\012\ufffe\013\ufffe\014\ufffe\032" +
    "\ufffe\001\002\000\004\037\125\001\002\000\020\006\ufffa" +
    "\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa\032\ufffa\001" +
    "\002\000\004\031\115\001\002\000\020\006\ufffc\007\ufffc" +
    "\010\ufffc\012\ufffc\013\ufffc\014\ufffc\032\ufffc\001\002\000" +
    "\020\006\025\007\017\010\014\012\021\013\013\014\024" +
    "\032\114\001\002\000\004\027\041\001\002\000\006\025" +
    "\027\037\030\001\002\000\020\006\ufff6\007\ufff6\010\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\032\ufff6\001\002\000\004\037" +
    "\037\001\002\000\010\024\031\025\033\036\032\001\002" +
    "\000\004\040\035\001\002\000\020\006\ufff3\007\ufff3\010" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\032\ufff3\001\002\000\004" +
    "\036\034\001\002\000\020\006\ufff1\007\ufff1\010\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\032\ufff1\001\002\000\004\036\036" +
    "\001\002\000\020\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\032\ufff2\001\002\000\004\036\040\001\002" +
    "\000\020\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\032\ufff0\001\002\000\006\006\043\037\044\001\002" +
    "\000\004\030\102\001\002\000\004\037\073\001\002\000" +
    "\004\015\045\001\002\000\004\040\046\001\002\000\004" +
    "\036\047\001\002\000\006\026\051\037\052\001\002\000" +
    "\004\036\063\001\002\000\006\030\uffec\036\uffec\001\002" +
    "\000\004\023\053\001\002\000\012\005\055\026\056\037" +
    "\057\040\054\001\002\000\006\030\uffea\036\uffea\001\002" +
    "\000\006\005\060\037\061\001\002\000\006\030\uffeb\036" +
    "\uffeb\001\002\000\006\030\uffe9\036\uffe9\001\002\000\006" +
    "\030\uffe8\036\uffe8\001\002\000\004\005\062\001\002\000" +
    "\006\030\uffe7\036\uffe7\001\002\000\006\025\066\037\065" +
    "\001\002\000\004\030\uffe1\001\002\000\006\024\070\025" +
    "\071\001\002\000\004\037\067\001\002\000\004\030\uffde" +
    "\001\002\000\004\040\072\001\002\000\004\030\uffdf\001" +
    "\002\000\004\030\uffe0\001\002\000\004\015\074\001\002" +
    "\000\004\040\075\001\002\000\004\036\076\001\002\000" +
    "\006\026\051\037\052\001\002\000\004\036\100\001\002" +
    "\000\006\025\066\037\065\001\002\000\004\030\uffe2\001" +
    "\002\000\004\031\103\001\002\000\016\006\025\007\017" +
    "\010\014\012\021\013\013\014\024\001\002\000\020\006" +
    "\025\007\017\010\014\012\021\013\013\014\024\032\112" +
    "\001\002\000\020\006\ufff9\007\ufff9\010\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\032\ufff9\001\002\000\020\006\ufff5\007\ufff5" +
    "\010\ufff5\012\ufff5\013\ufff5\014\ufff5\032\ufff5\001\002\000" +
    "\020\006\uffff\007\uffff\010\uffff\012\uffff\013\uffff\014\uffff" +
    "\032\uffff\001\002\000\020\006\ufffb\007\ufffb\010\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\032\ufffb\001\002\000\020\006\ufffd" +
    "\007\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd\032\ufffd\001" +
    "\002\000\020\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\032\uffe3\001\002\000\020\006\ufff7\007\ufff7\010" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\032\ufff7\001\002\000\004" +
    "\002\000\001\002\000\016\006\025\007\017\010\014\012" +
    "\021\013\013\014\024\001\002\000\020\006\025\007\017" +
    "\010\014\012\021\013\013\014\024\032\117\001\002\000" +
    "\004\013\120\001\002\000\004\027\121\001\002\000\006" +
    "\026\051\037\052\001\002\000\004\030\123\001\002\000" +
    "\004\036\124\001\002\000\020\006\uffe4\007\uffe4\010\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\032\uffe4\001\002\000\004\024" +
    "\126\001\002\000\004\005\127\001\002\000\006\005\130" +
    "\037\131\001\002\000\004\036\134\001\002\000\004\005" +
    "\132\001\002\000\004\036\133\001\002\000\020\006\uffee" +
    "\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\032\uffee\001" +
    "\002\000\020\006\uffef\007\uffef\010\uffef\012\uffef\013\uffef" +
    "\014\uffef\032\uffef\001\002\000\006\026\051\037\052\001" +
    "\002\000\004\030\137\001\002\000\004\031\140\001\002" +
    "\000\016\006\025\007\017\010\014\012\021\013\013\014" +
    "\024\001\002\000\020\006\025\007\017\010\014\012\021" +
    "\013\013\014\024\032\142\001\002\000\022\006\uffed\007" +
    "\uffed\010\uffed\011\143\012\uffed\013\uffed\014\uffed\032\uffed" +
    "\001\002\000\004\031\144\001\002\000\016\006\025\007" +
    "\017\010\014\012\021\013\013\014\024\001\002\000\020" +
    "\006\025\007\017\010\014\012\021\013\013\014\024\032" +
    "\146\001\002\000\020\006\uffe6\007\uffe6\010\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\032\uffe6\001\002\000\006\026\051\037" +
    "\052\001\002\000\004\030\151\001\002\000\004\031\152" +
    "\001\002\000\016\006\025\007\017\010\014\012\021\013" +
    "\013\014\024\001\002\000\020\006\025\007\017\010\014" +
    "\012\021\013\013\014\024\032\154\001\002\000\020\006" +
    "\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5\032\uffe5" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\022\004\015\006\021\007\017\010" +
    "\011\011\025\012\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\106\006\110\007\107\010" +
    "\104\011\112\012\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\076\001\001\000\002\001\001\000\004\005\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\103\004\015\006\021\007\017\010\011\011\025\012\014" +
    "\001\001\000\016\004\106\006\110\007\107\010\104\011" +
    "\112\012\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\115\004\015\006\021\007\017\010\011\011\025\012" +
    "\014\001\001\000\016\004\106\006\110\007\107\010\104" +
    "\011\112\012\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\140\004\015\006\021\007\017\010\011\011" +
    "\025\012\014\001\001\000\016\004\106\006\110\007\107" +
    "\010\104\011\112\012\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\144\004\015\006\021\007\017" +
    "\010\011\011\025\012\014\001\001\000\016\004\106\006" +
    "\110\007\107\010\104\011\112\012\105\001\001\000\002" +
    "\001\001\000\004\013\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\152\004\015\006\021\007\017" +
    "\010\011\011\025\012\014\001\001\000\016\004\106\006" +
    "\110\007\107\010\104\011\112\012\105\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_FOR ::= T_Dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= T_Dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= T_Dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= T_Dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= T_Dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

